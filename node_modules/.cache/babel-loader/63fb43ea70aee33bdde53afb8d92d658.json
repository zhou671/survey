{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jessi\\\\Documents\\\\react-survey\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Suspense } from \"react\";\nimport { useState, useMemo } from 'react';\nimport * as THREE from \"three\";\nimport Header from \"./components/Header\";\nimport Button from \"./components/Button\";\nimport Registration from \"./components/Registration\";\nimport Loading from \"./components/Loading\";\nimport Rendering from \"./components/Rendering\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst checkuserurl = \"http://localhost:5000/api/checkuser/\";\nconst getobjfileurl = \"http://localhost:5000/api/getfile/\";\n\nfunction App() {\n  _s();\n\n  var file;\n  const mat = new THREE.MeshPhongMaterial();\n  const [pageState, setState] = useState(0);\n  const [nextSeqId, setNextSeqId] = useState(0);\n  const [userId, setUserId] = useState('');\n  const [filename, setFilename] = useState('');\n\n  const handleLogin = userName => {\n    console.log(userName);\n    let xhttp = new XMLHttpRequest();\n    xhttp.open(\"GET\", checkuserurl + userName, true);\n    xhttp.addEventListener('load', () => {\n      console.log('Received an HTTP response.');\n      var jsonresp = JSON.parse(xhttp.response);\n      console.log(jsonresp);\n      setNextSeqId(parseInt(jsonresp.nextId));\n      setFilename(jsonresp.fileName);\n      setState(2);\n    });\n    xhttp.send();\n    setUserId(userName);\n  };\n\n  const load = () => {\n    setState(2);\n  };\n\n  const onClick = () => {\n    setState(3);\n  };\n\n  let page;\n\n  if (pageState === 0) {\n    page = /*#__PURE__*/_jsxDEV(Registration, {\n      onRegister: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  } else if (pageState === 2) {\n    page = /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Rendering, {\n          url: getobjfileurl + filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"model1\",\n          onClick: onClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this); //page = <Rendering file={file}/>;\n  } else if (pageState === 3) {\n    page = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Thanks!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  var camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: page\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4PGNgZXP/N4l7m2bXHIcHOvnpRI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jessi/Documents/react-survey/src/App.js"],"names":["React","Suspense","useState","useMemo","THREE","Header","Button","Registration","Loading","Rendering","checkuserurl","getobjfileurl","App","file","mat","MeshPhongMaterial","pageState","setState","nextSeqId","setNextSeqId","userId","setUserId","filename","setFilename","handleLogin","userName","console","log","xhttp","XMLHttpRequest","open","addEventListener","jsonresp","JSON","parse","response","parseInt","nextId","fileName","send","load","onClick","page","camera","PerspectiveCamera"],"mappings":"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","sourcesContent":["import React, { Suspense } from \"react\";\nimport {useState, useMemo} from 'react';\nimport * as THREE from \"three\";\nimport Header from \"./components/Header\";\nimport Button from \"./components/Button\"\nimport Registration from \"./components/Registration\";\nimport Loading from \"./components/Loading\";\nimport Rendering from \"./components/Rendering\";\n\nconst checkuserurl = \"http://localhost:5000/api/checkuser/\";\nconst getobjfileurl = \"http://localhost:5000/api/getfile/\";\n\nfunction App() {\n  var file;\n  const mat = new THREE.MeshPhongMaterial()\n  const [pageState, setState] = useState(0)\n  const [nextSeqId, setNextSeqId] = useState(0)\n  const [userId, setUserId] = useState('')\n  const [filename, setFilename] = useState('')\n  const handleLogin = (userName) => {\n    console.log(userName)\n    let xhttp = new XMLHttpRequest();\n    xhttp.open(\"GET\", checkuserurl+userName, true);\n    xhttp.addEventListener('load', () => {\n        console.log('Received an HTTP response.');\n        var jsonresp = JSON.parse(xhttp.response);\n        console.log(jsonresp);\n        setNextSeqId(parseInt(jsonresp.nextId));\n        setFilename(jsonresp.fileName)\n        setState(2)\n    });\n    xhttp.send();\n    setUserId(userName)\n  }\n  const load = () => {\n    setState(2)\n  }\n  const onClick = () =>{\n    setState(3)\n  }\n  let page;\n  if(pageState === 0){\n    page = <Registration onRegister={handleLogin}/>;\n  }  else if (pageState === 2){\n    page = \n    <Suspense fallback={<div>Loading...</div>}> \n      <div>\n        <Rendering url={getobjfileurl+filename}/>\n        <Button text=\"model1\" onClick={onClick}/>\n        {/* <Rendering url={getobjfileurl+filename}/>\n        <Rendering url={getobjfileurl+filename}/>\n        <Button text=\"model2\" onClick={onClick}/> */}\n      </div>\n    </Suspense>\n    //page = <Rendering file={file}/>;\n  } else if (pageState === 3){\n    page = <h1>Thanks!</h1>\n  }\n  var camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n  return (\n    <div className=\"container\">\n      {page}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}